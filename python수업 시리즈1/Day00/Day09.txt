학습 목표 : 
1. 객체지향 프로그래밍의 개념을 파악할 수 있다.
2. 클래스와 객체에 대한 개념을 파악하고 생성할 수 있다.

변수, 명령어 < 함수 (함수) < 클래스 < 모듈 < 패키지

--  exClass1.py --
"""
파일명 : exClass1.py 
프로그램 설명 : 클래스 사용하기 (객체를 생성하지 않고 사용하기)
"""

# 1. 클래스 정의
class ClassTest1:
    a = 1  # 클래스 변수
    b = 2

    # 함수가 클래스 안으로 들어오면 method, 메서드(메소드)라고 불린다.
    def method1():
        """method1 정의"""
        print('method1()  실행!')
    
    def method2():
        """method2 정의"""
        print('method2() 실행!')


# 클래스 사용
# 파이썬에서는 클래스 자체를 사용할 수 있다.
# . 의 의미: ~의 라고 읽는다.
# 변수 사용 형식: 클래스명.변수명
# 함수 사용 형식: 클래스명.메소드(함수)명()

# 2. 클래스 변수 사용
# 형식: 클래스명.변수명
print(ClassTest1.a)  # 1
print(ClassTest1.b)  # 2

# 3. 클래스 메소드 사용
# 형식: 클래스명.메소드명()
ClassTest1.method1()
ClassTest1.method2()
--  exClass1.py --


--  exClass2.py --
"""
파일명 : exClass2.py 
프로그램 설명 : 클래스 사용하기 (객체를 생성하고 사용하기)
"""
# 1. 클래스 정의
class ClassTest2:

    def method1(self):  # 인스턴스 메소드
        """method1() 정의"""
        self.a = 1  # 인스턴스 변수 (self ?)
        self.b = 2
    
    def printValue(self):
        """인스턴스 변수를 출력하는 메소드"""
        print(self.a, self.b)


# 2. 인스턴스(객체) 생성
# 형식: 변수명 = 클래스명()
ct2 = ClassTest2()  # 클래스가 그대로 메모리에 복사된다.

# 3. 인스턴스(객체) 사용
# 형식: 인스턴스.변수명
# 형식: 인스턴스.메소드명()
ct2.method1()
ct2.printValue()     # 1 2 
print(ct2.a, ct2.b)  # 1 2

--  exClass2.py --


-- exClass3.py --
"""
파일명 : exClass3.py 
프로그램 설명 : 디버깅을 이용한 클래스/인스턴스 주소 확인하기
"""

# 1. 클래스 정의
class ClassTest3:

    # 인스턴스가 생성되지 않았기 때문에 에러가 발생된다.
    # self.a = 1
    a = 1
    b = 2

    def func1(self):
        """func1() 메소드 정의"""
        print("func1() 메소드 실행!")

    def printSelf(self):
        """self의 주소를 출력하는 메소드"""
        print('printSelf() 메소드 실행!')
        print(self)
        print(id(self))
        print(hex(id(self)))

# 2. 인스턴스(객체) 생성
# 형식: 객체변수명 = 클래스명()  <-- 함수 호출하듯이 사용한다.
ct3 = ClassTest3()

print(ct3)          # 주소 출력(16진수) 0~9abcdef 10~19 1a 1b 1c 1d 1e 1f 20
print(id(ct3))      # 주소 출력(10진수) 
print(hex(id(ct3))) # 주소 출력(16진수)
ct3.printSelf()     # self의 주소가 출력

# 3. 인스턴스(객체) 메소드 사용
# 형식: 인스턴스명(객체).메소드명(), 인스턴스명(객체).변수명
# . 의미: ~ 의라고 읽는다.
# . 의미: ~에 존재하는 이라고 읽는다.

# ct3의 func1() 메소드 실행
ct3.func1()  # ct3에 존재하는 func1()을 호출한다. 
print(ct3.a,ct3.b)  # 1 2 
-- exClass3.py --

실습> 점수 프로그램을 클래스로 변환하기

파일명 : jumsu1Class.py
클래스명 : Jumsu

인스턴스 메소드#1 : inputJumsu
- 매개변수 : 없음
- 리턴값 : 없음
- 기능 : 점수를 입력받는 메소드

인스턴스 메소드#2 : getGrade
- 매개변수 : 없음
- 리턴값 : 없음
- 기능 : 입력받은 점수에서 학점을 구하는 메소드

인스턴스 메소드#3 : printJumsu
- 매개변수 : 없음
- 리턴값 : 없음
- 기능 : 입력받은 점수를 출력하는 메소드


인스턴스(객체)명 #1 : jumsu1
인스턴스(객체)명 #2 : jumsu2


-- jumsu1Class.py --
"""
파일명 : jumsu1Class.py
프로그램 설명 : 성적처리 프로그램을 클래스로 변경 (클래스로 변경하기 전 소스코드)
"""

# 1. 점수 입력
print('>>> 성적 처리 프로그램 <<<')
kor  = input('국어 점수: ')
eng  = input('영어 점수: ')
math = input('수학 점수: ')

# 2. 점수 체크
kor  = 0 if not kor.isdigit()  else int(kor)
eng  = 0 if not eng.isdigit()  else int(eng)
math = 0 if not math.isdigit() else int(math)

# 3. 점수 계산
total = kor + eng + math  # 총점
average = total / 3  # 평균

# 4. 학점 구하기
# A학점 : 90 ~ 100   , grade = 'A'
# B학점 : 80 ~ 89.9  , grade = 'B'
# C학점 : 70 ~ 79.9  , grade = 'C'
# D학점 : 60 ~ 69.9  , grade = 'D'
# F학점 : 0 ~ 59.9   , grade = 'F'
if average >= 90 and average <= 100:  # A학점 : 90 ~ 100
    grade = 'A'
elif average >= 80 and average < 90:  # B학점 : 80 ~ 89.9
    grade = 'B'
elif average >= 70 and average < 90:  # C학점 : 70 ~ 79.9
    grade = 'C'
elif average >= 60 and average < 70:  # D학점 : 60 ~ 69.9
    grade = 'D'
else:  # F학점 : 0 ~ 59.9  
    grade = 'F'

# 5. 점수 출력
print('>>> 점수의 결과 <<<\n'
     f'국어 점수: {kor}\n'
     f'영어 점수: {eng}\n'
     f'수학 점수: {math}\n'
     f'총점: {total}\n'
     f'평균: {average:.2f}\n'
     f'학점: {grade}')

-- jumsu1Class.py --


-- jumsu1Class.py --
"""
파일명 : jumsu1Class.py
프로그램 설명 : 성적처리 프로그램을 클래스로 변경 (클래스로 변경한 소스코드)
"""


# 1. 클래스 정의
class Jumsu:

    def inputJumsu(self):
        # 1. 점수 입력
        print('>>> 성적 처리 프로그램 <<<')
        self.kor  = input('국어 점수: ')
        self.eng  = input('영어 점수: ')
        self.math = input('수학 점수: ')

        # 2. 점수 체크
        self.kor  = 0 if not self.kor.isdigit()  else int(self.kor)
        self.eng  = 0 if not self.eng.isdigit()  else int(self.eng)
        self.math = 0 if not self.math.isdigit() else int(self.math)
	# jumsu1.getGrade(), jumsu2.getGrade()로 사용하면 안되고 self를 사용해야 한다.
        self.getGrade()  

    def getGrade(self):
        # 3. 점수 계산
        self.total = self.kor + self.eng + self.math  # 총점
        self.average = self.total / 3  # 평균

        # 4. 학점 구하기
        # A학점 : 90 ~ 100   , grade = 'A'
        # B학점 : 80 ~ 89.9  , grade = 'B'
        # C학점 : 70 ~ 79.9  , grade = 'C'
        # D학점 : 60 ~ 69.9  , grade = 'D'
        # F학점 : 0 ~ 59.9   , grade = 'F'
        if self.average >= 90 and self.average <= 100:  # A학점 : 90 ~ 100
            self.grade = 'A'
        elif self.average >= 80 and self.average < 90:  # B학점 : 80 ~ 89.9
            self.grade = 'B'
        elif self.average >= 70 and self.average < 90:  # C학점 : 70 ~ 79.9
            self.grade = 'C'
        elif self.average >= 60 and self.average < 70:  # D학점 : 60 ~ 69.9
            self.grade = 'D'
        else:  # F학점 : 0 ~ 59.9  
            self.grade = 'F'
        self.printJumsu()

    def printJumsu(self):
        # 5. 점수 출력
        print('>>> 점수의 결과 <<<\n'
            f'국어 점수: {self.kor}\n'
            f'영어 점수: {self.eng}\n'
            f'수학 점수: {self.math}\n'
            f'총점: {self.total}\n'
            f'평균: {self.average:.2f}\n'
            f'학점: {self.grade}')

# 2. 인스턴스(객체) 생성
jumsu1 = Jumsu()
jumsu2 = Jumsu()

# 3. 인스턴스 메소드 실행
jumsu1.inputJumsu()
jumsu2.inputJumsu()

-- jumsu1Class.py --


-- test.py --
class ClassTest3:

    def __test(self):
        """ 외부에서 호출금지 (객체 내부에서는 호출 가능) """
        print("test!")
    
    def test2(self):
        """ 외부에서 호출가능 """
        self.__test()        

ct3 = ClassTest3()
# ct3.__test()  # 에러(외부에서 접근이 안된다.)
ct3.test2()
-- test.py --


-- exClass4.py --
"""
파일명 : exClass4.py 
프로그램 설명 : 생성자 사용하기 
"""

# 생성자는 인스턴스(객체)를 생성할 때 자동으로 호출되는 메소드다.
# 생성자의 역할은 값을 초기화할 때 사용한다.
# 생성자는 메소드명이 __init__ 이름으로 지정되어 있다.
class ClassTest4:

    def __init__(self, number1, number2, number3):
        """ 생성자 """
        print('생성자 메소드 실행!')
        self.number1 = number1
        self.number2 = number2
        self.number3 = number3
    
    def getNumber(self):
        print(self.number1, self.number2, self.number3)

ct41 = ClassTest4(1,2,3)
ct42 = ClassTest4(10,20,30)
ct43 = ClassTest4(100,200,300)
ct44 = ClassTest4(number3=100, number2=20, number1=1)
ct41.getNumber()  # 1 2 3
ct42.getNumber()  # 10 20 30
ct43.getNumber()  # 100 200 300
ct44.getNumber()  # 1 20 100
-- exClass4.py --

-- exClass5.py --
"""
파일명 : exClass5.py 
프로그램 설명 : 소멸자 사용하기 
"""

# 소멸자는 객체가 없어질 때 자동으로 호출되는 메소드
# 소멸자는 값을 삭제할 때 사용한다.
# 소멸자는 생성자처럼 __del__ 로 이름이 정해져 있다.
# 리소스를 해제할 때 사용된다.

class ClassTest5:

    def __init__(self, name):
        """생성자"""
        self.name = name
        print(f'{self.name} 생성자 실행!')

    def __del__(self):
        """소멸자"""
        print(f'{self.name} 소멸자 실행!')

ct51 = ClassTest5('홍길동')
del ct51
ct52 = ClassTest5('고길동')
ct53 = ClassTest5('김길동')

# 실행 결과
# 홍길동 생성자 실행!
# 홍길동 소멸자 실행!
# 고길동 생성자 실행!
# 김길동 생성자 실행!
# 고길동 소멸자 실행!
# 김길동 소멸자 실행!
-- exClass5.py --

-- exInheritance.py --
"""
파일명 : exInheritance.py 
프로그램 설명 : 상속
"""

# class A(Object):
class A:
    a = 1
    
    def methodA(self): 
        print("methodA() 실행!")

class B(A):
    b = 2

    def methodB(self):
        print('methodB() 실행!')    

objb = B()
print(objb.a, objb.b)  # 1 2
objb.methodA()  # methodA() 실행!
objb.methodB()  # methodB() 실행!
print('프로세스 종료 ')   

-- exInheritance.py --

-- exMethodOverriding.py --
"""
파일명 : exInheritance.py 
프로그램 설명 : 메소드 오버라이딩(메소드 재정의)
"""

class A:
    a = 1
    
    def methodA(self): 
        print("methodA() 실행!")

class B(A):
    b = 2

    def methodA(self): 
        print(">>> methodA() 재정의 실행! <<<")
        
    def methodB(self):
        print('methodB() 실행!')    

    def methodC(self):
        super().methodA()  

objb = B()
print(objb.a, objb.b)  # 1 2
objb.methodA()
objb.methodB()
objb.methodC()
print('프로세스 종료 ')   
-- exMethodOverriding.py -- s