학습 목표 : 
1. 함수의 종류와 개념을 파악할 수 있다.
2. 사용자 정의함수를 이용해서 프로그램을 작성할 수 있다.

##########
## 함수 
##########
함수는 1개 이상의 명령어를 모아 놓은 것이고 함수를 실행하면 여러 개 모아놓은 명령어들이 실행된다.

함수 종류
라이브러리 함수 : 파이썬을 설치하면 제공되는 함수 (print, input)
패키지 함수 : 패키지를 설치하면 제공되는 함수
사용자 정의 함수 : 사용자가 직접 만들어서 사용하는 함수

함수는 코드의 중복을 제거하고 다시 사용하는 재사용성의 의미를 가지고 있다.

입력값은 함수를 호출할 때 함수에 전달하는 값을 말한다.
입력값 : 인수, 인자, 아규먼트

출력값은 함수가 종료하면 호출된 쪽으로 값을 전달하는 것을 말한다.
출력값 : 리턴값

인수, 인자, argument :
- 함수로 전달되는 값을 말한다.
- 함수 호출 부분에 있다. e.g.) max(1,2), print('Hello')

매개변수, parameter : 
- 함수 내부에서 함수로 전달된 값을 저장한 변수를 말한다. 
- 함수 정의 부분에 있다.
e.g.)
def max(i, j):
    :
    :

함수의 종료 시점
- 함수안에 실행문들이 끝난 경우
- 함수에서 리턴문을 만난 경우

함수는 정의가 먼저 나오고 호출이 나중에 나온다.
함수 호출이 먼저 나오고 함수 정의가 뒤에 오면 에러가 발생된다.

-- 함수1.py --
"""
파일명 : 함수1.py
프로그램 설명 : 함수 예제
"""

# 함수 정의
def function(a,b):
    c = a + b
    return c

print(function)
hap = function(5, 10)  # 함수 호출
print(hap)
print(function(3, 20))  # 함수 재사용

-- 함수1.py --

-- 함수2.py --
"""
파일명 : 함수2.py
프로그램 설명 : 함수 예제
"""
# 함수를 사용하지 않은 경우
# a = 1
# print(a)

# 함수를 사용한 경우
def myFunction():
    a = 1
    print(a)

myFunction()
-- 함수2.py --

-- 함수3.py --
"""
파일명 : 함수3.py
프로그램 설명 : 함수 예제
"""

# 함수를 이용해서 2단을 출력한 경우

def gugudan():
#     dan = 2
#     for i in range(1,10):
#         print(f'{dan}x{i}={dan*i}', end='  ')
#     else:
#         print()

# gugudan()     


def gugudan(dan):
    for i in range(1,10):
        print(f'{dan}x{i}={dan*i:<2d}', end='  ')
    else:
        print()

# gugudan(2)
# gugudan(3)
#   :
# gugudan(7)
# gugudan(8)
# gugudan(9)

# 2단 ~ 9단까지 효율적으로 호출하는 방법은?
for i in range(2,10):
    gugudan(i)                

-- 함수3.py --

실습> 최댓값을 구하는 사용자 함수 만들기

# 파일명: myMax.py
# 함수명: myMax
# 인수: 값 2개
# 첫 번째 매개변수명: a
# 두 번째 매개변수명: b
# 리턴값: 두 개의 값을 비교해서 가장 큰 값을 리턴한다.
# 기능: 전달된 인수값을 비교해서 가장 큰 값을 돌려준다.

-- 실행 결과 --
print(myMax(1,2))    # 2
print(myMax(100,2))  # 100
print(myMax(100,2,200))  # 에러 (인수를 2개밖에 받을 수 없다.)

-- myMax.py --
def myMax(a, b):
    if a > b:
        return a
    else:
        return b
    
print(myMax(1,2))    # 2
print(myMax(100,2))  # 100
print(myMax(100,2,200))  # 에러 (인수를 2개 밖에 받을 수 없다.)
-- myMax.py --



# 여러 개의 인수를 받을 때는 매개변수를 *args로 받으면 된다.
def function(*args):
    print(args, type(args))  # tuple

function(1,2)
function(1,2,3)    
function(1,2,3,4,5)

-- myMax.py --
def myMax(*args):
    a = 0

    for b in args:  # 튜플은 반복
        if a > b:
            a = a
        else:
            a = b
    return a
    
print(myMax(1,2))    # 2
print(myMax(100,2))  # 100
print(myMax(100,2,200))  # 에러 (인수를 2개 밖에 받을 수 없다.)
-- myMax.py --

수업 준비중입니다.
  . 수업 시작: 19:00 
  . 수업 종료: 22:10