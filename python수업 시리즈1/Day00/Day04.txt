학습 목표 : 
파이썬에서 제공하는 연산자의 종류를 파악할 수 있다.

연산자의 종류
1. 산술 연산자 (Arithmetic operators)
2. 대입 연산자 (Assignment operators)
3. 관계 연산자 (Relational operators)
4. 논리 연산자 (Logical operators)
5. 비트 연산자 (Bitwise operators)
6. 구성원 연산자 (Membership Operators)
7. 식별 연산자 (Identity Operators)


파이썬에서 수식(식)은 연산자와 피연산자로 이루어져 있다.  
2 + 3 이라는 수식에서 2와 3은 피연산자(연산의 대상)에 해당되며, 
+ 는 연산자(무엇을 연산할 것이지 나타내는 부분)에 해당한다.

연산자(Operator): 프로그램을 짤 때 변수나 값의 연산을 위해서 사용되는 부호는 말한다.
피연산자(Operand): 피연산(Operation)의 대상이 되는 데이터를 말한다.
a + b라는 연산에서 +는 연산자에 해당되고 a와 b는 피연산자에 해당된다.

!!! 중요 !!!
각 연산자로 연산을 수행할 때 결괏값이 중요하다.


1. 산술 연산자 (Arithmetic operators)
수학 연산을 사용하기 위한 연산자
결과: 연산된 결괏값

형식:
a 산술연산자 b

a = 2  # 동시에 사용할 때 a,b = 2, 8
b = 8  # C,C++,Java에서 사용하는 형태이고 파이썬에서는 에러 a = 2, b = 8 


연산자    사용 예     설명    결괏값
+        a + b     더하기   10
-        a - b     빼기     -6
*        a * b     곱하기   16
/        b / a     나누기   4.0 (몫)
//       b //a     나누기   4 (몫, 소수점 제거) 
%        a % b     나머지   2
**       a ** b    거듭제곱  256

산술 연산자 우선순위
1. **
2. *, /, //, %
3. +, -
우선 순위를 변경하기 위해서는 ( ) 괄호를 넣어서 계산한다.

(20 + 3) + 12 + 2 ** 3 / 4 * 3

-- exArithmetic1.py --
"""
파일명: exArithmetic1.py
프로그램 설명:  산술 연산자 예제 1
"""

a, b = 2, 8

# 연산의 결과를 일시적으로 사용하는 방법
# 연산의 결과가 바로 적용된다.
print(a + b)  # 10
print(a - b)  # -6
print(a * b)  # 16
print(b / a)  # 4.0
print(b % a)  # 0
print(b // a) # 4
print(a ** 3) # 8

# 연산의 결과를 영구적으로 사용하는 방법
# 연산 결과를 변수에 저장한다.
# 산술 연산자(+)가 대입 연산자(=) 보다 우선 순위가 높다.
hap = 2 + 20
print(hap)  # 22
print(max(hap, 10, 3*2))  # 22

# 산술 연산자 우선 순위
# 1. **
# 2. *, /, //, %
# 3. +, -
# 우선 순위를 먼저 지정할 경우에는 ( ) 괄호를 넣어준다.
print(3 + 5 * 3)  # 18
print((3+5) * 3)  # 24
print((20 + 3) + 12 + 2 ** 3 / 4 * 3)  # 41.0
-- exArithmetic1.py --

-- exArithmetic2.py --
"""
파일명 : exArithmetic2.py
프로그램 설명 :  산술 연산자 예제 2 
"""

# 산술 연산자 우선 순위
# 1. () 
# 2. **
# 3. *, /, //, %
# 4. +, -

print((10 + 5) + 12 + 4 ** 3 / 4 * 2)  # 59.0

# (10 + 5) + 12 + 4 ** 3 / 4 * 2
# ~~~~~~~~
#    15    + 12 + 4 ** 3 / 4 * 2
#                ~~~~~~~
#    15    + 12 +   64   / 4 * 2
#                   ~~~~~~~~
#     15    + 12 +   16.0     * 2
#                    ~~~~~~~~~~~~
#     15    + 12 +      32.0
#     ~~~~~~~~~~
#        27      +      32.0
#        ~~~~~~~~~~~~~~~~~~~
#              59.0

-- exArithmetic2.py --

2. 대입 연산자 (Assignment operators)
변수에 값을 저장(대입)하기 위해서 사용하는 연산자
결과: 변수에 값을 저장한다.

형식:
a는 변수가 오고 b는 값, 변수, 수식, 함수를 사용한다.
a 대입연산자 b

대입 연산자 종류
= : 순수 대입 연산자
+=, -=, *=, /=, %=, **=, //= : 복합 대입 연산자(대입 연산자 + 산술 연산자)

a = 2
b = 8
연산자     사용 예   의미                                       결과
=         a = b    a 변수에 b에 저장된 값이 저장된다.             a에는 8이 저장된다.
+=        a += b   a와 b를 더해서 a에 저장한다. (a = a + b동일)   a에는 10이 저장된다.
-=        a -= b   a = a - b                                a에는 -6이 저장된다.
*=        a *= b   a = a * b                                a에는 16이 저장된다.
/=        a /= b   a = a / b                                0.25
%=        a %= b   a = a % b                                2
**=       a **= b  a = a ** b                               256
//=       a //= b  a = a // b                               0

-- exAssignment1.py --
"""
파일명 : exAssignment1.py 
프로그램 설명 : 대입 연산자 예제 1
"""

a = 2
b = 8

# 변수 a에 저장된 값을 1증가
# 형식 : 변수명 += 1
print(a)  # 2
a += 1    # 1 증가 a = a + 1
print(a)  # 3

# 변수 b에 저장된 값을 1감소
# 형식 : 변수명 -= 1
print(b)  # 8
b -= 1    # 1 감소
print(b)  # 7

a **= b      # a = a ** b
print(a, b)  # 2187 7
-- exAssignment1.py --

3. 관계 연산자 (Relational operators)
두 값을 비교하기 위한 연산자
관계 연산자 or 비교 연산자라고도 말한다.

관계 연산자는 좌변과 우변의 값을 비교해서 크기 관계를 평가하며
그 결과를 참(True), 거짓(False)으로 나타낸다.
결과: True, False

형식: 
a는 변수, 값, 함수(메소드)오고 b 는 변수, 값, 함수(메소드)를 사용한다.
a 관계연산자 b  -> 결과는 True/False

C++, Java : true, false
Python : True, False   


a,b = 2,8 이라고 할 때 

연산자     사용 예     의미 설명
==        a == b    같다 (동등) (Equal)
!=        a != b    같지 않다   (Not equal)
>         a > b     크다 (초과) (Greater than)
<         a < b     작다 (미만) (Less than)
>=        a >= b    크거나 같다 (이상) (Greater than or equal to)
<=        a <= b    작거나 같다 (이하) (Less than or equal to)


-- exRelational1.py --
"""
파일명 : exRelational1.py
프로그램 설명 : 관계 연산자 예제 1
"""

a, b = 2, 8
print(a, b)  # 2 8
print(a == b)  # False
print(a != b)  # True
print(a > b)   # False
print(a < b)   # True
print(a >= b)  # False
print(a <= b)  # True
-- exRelational1.py --


4. 논리 연산자 (Logical operators)
두 개 이상의 관계 연산자를 묶을 때 사용하는 연산자

형식: 조건1 논리 연산자 조건2  --> 결과: True, False
조건1: 관계 연산자 (1 == 1 and 2 == 2)
조건2: 관계 연산자 (1 == 1 and 2 == 2)

!!! 중요 !!!
논리곱은 조건1의 연산 결과가 거짓이면 조건2를 평가하지 않는다.
논리합은 조건1의 연산 결과가 참이면 조건2를 평가하지 않는다.

논리 연산자 : and, or, not
논리 연산자의 우선 순위
1. not  (참고: C,C++,Java 언어에서는 !를 사용한다.)
2. and  (참고: C,C++,Java 언어에서는 &&를 사용한다.)
3. or   (참고: C,C++,Java 언어에서는 ||를 사용한다.)

연산자    사용 예    의미
and     a and b   a 와 b를 and 연산
or      a or b    a 와 b를 or 연산
not     not a     a 의 논리 부정 연산

논리곱(and) : 두 조건이 모두 참이면 참
논리곱 진리표           
a       b      a and b
False  False   False
False  True    False
True   False   False
True   True    True   

논리합(or)  : 두 조건 중 하나만 참이면 참
논리합 진리표
a       b      a or b
False  False   False
False  True    True
True   False   True
True   True    True

논리부정(not) : 피연산자의 값이 참이면 거짓, 거짓이면 참으로 바꾼다.
논리부정(not)은 True->False, False->True 로 뒤바꾼다.
참고: 다른 언어에서는 !를 사용하지만 파이썬에서는 not을 사용한다.

논리부정 진리표
a      not a
True   False
False  True


-- exLogical1.py --
"""
파일명 : exLogical1.py 
프로그램 설명 : 논리 연산자 예제 1 
"""

# 논리합 테스트
# print(False or False)  # False
# print(False or True)   # True
# print(True or False)   # True
# print(True or True)    # True

# 논리곱 테스트 
# print(False and False)   # False
# print(False and True)    # False
# print(True and False)    # False
# print(True and True)     # True

# 논리 부정 테스트
print(not False)  # True
print(not True)   # False
print(not not True)  # True
-- exLogical1.py --

-- exLogical2.py --
"""
파일명 : exLogical2.py 
프로그램 설명 :  논리 연산자 예제 2
"""

a = 1
b = 3
c = 5
print(a > 2 or c > b)    # True
print(b == 3 and c > 3)  # True
print(a != 2 and c == 3 or a == 1)  # True
-- exLogical2.py --

-- exLogical3.py --                  
"""
파일명 : exLogical3.py 
프로그램 설명 : 논리 연산자 예제 3
"""

# 나이: age
# 9세이상 ~ 12세 이하
age = 13 # 1 ~ 8: F , 9 ~ 12: T, 13 ~: F
print(age >= 9 and  age <= 12)

# 나이: age
# 8세 미만, 11세 초과
age = 13    # True
# age = 7   # True
# age = 8   # False
# age = 11  # False

print(age < 8 or age > 11)
-- exLogical3.py --   

5. 비트 연산자 (Bitwise operators)
컴퓨터의 최소 단위인 비트를 다루는 연산자
결과: 연산된 결괏값

참고 : https://www.binaryconvert.com/
계산기 -> 프로그래머로 확인이 가능하다.

128 64 32 16 8 4 2 1

00000000
||||||||
|||||||+-- 2^0
||||||+-- 2^1
|||||+-- 2^2
||||+-- 2^3
|||+-- 2^4
||+-- 2^5
|+-- 2^6
+-- 2^7

a = 7, b = 3 일 경우 2진수 표현하면
a = 00000111
b = 00000011

연산자 사용 예       의미       
&      a & b      비트 AND 연산. 둘다 참일때만 만족	
|      a | b      비트 OR 연산. 둘 중 하나만 참이여도 만족
^      a ^ b      비트 XOR 연산. 둘 중 하나만 참일 때 만족	
~      a ~ b      비트 NOT 연산, 보수 연산.	
<<     a << b     왼쪽 시프트 연산자. 변수의 값을 왼쪽으로 지정된 비트 수 만큼 이동	
>>     a >> b     오른쪽 시프트 연산자. 변수의 값을 오른쪽으로 지정된 비트 수 만큼 이동	

a & b : 3
a =    00000111
b =  & 00000011
     ----------
       00000011
       
a | b : 7
a =    00000111
b =  | 00000011
     ----------
       00000111

a ^ b : 4
a =    00000111
b =  ^ 00000011
     ----------
       00000100


~a : -8
a = 00000111
~a :11111000

1  : 00000001   
~1 : 11111110   10000001(x)

1 : 00000001


-1 : 11111111
-2 : 11111110
-3 : 11111101
-4 : 11111100

1일 경우 왼쪽 쉬프트 연산을 한 경우
128 64 32 16 8 4 2 1 
1 << 1
00000001  << 1  => 00000010
00000001  << 2  => 00000100
00000001  << 3  => 00001000

128 64 32 16 8 4 2 1 
64일 경우 오른쪽 쉬프트 연산을 한 경우
64 : 01000000 >> 1 => 00100000
64 : 01000000 >> 2 => 00010000



-- exBitwise1.py --
"""
파일명 : exBitwise1.py 
프로그램 설명 :  비트 연산자 예제 1
"""

# 128 64 32 16 8 4 2 1 
# a = 00000111    
# b = 00000011

a = 7
b = 3
print(bin(a))  # 0b111
print(bin(b))  # 0b11

# 8bit로 표현
# 00000111
# 00000011
print("{0:b}".format(a).zfill(8))  # 00000111
print("{0:b}".format(b).zfill(8))  # 00000011

# 32bit로 표현
# 00000000000000000000000000000111
# 00000000000000000000000000000011
print("{0:b}".format(a).zfill(32))  # 00000111
print("{0:b}".format(b).zfill(32))  # 00000011

# 64bit로 표현
# 0000000000000000000000000000000000000000000000000000000000000111
# 0000000000000000000000000000000000000000000000000000000000000011
print("{0:b}".format(a).zfill(64))  # 00000111
print("{0:b}".format(b).zfill(64))  # 00000011
-- exBitwise1.py --

6. 구성원 연산자 (Membership Operators)
구성원의 존재 유무를 확인하는 연산자
값이 있는지 없는지 판단할 때 사용한다.
결과: True, False

종류 : in, not in
in     : 값이 존재하면 True, 존재하지 않으면 False
not in : 값이 존재하지 않으면 True, 존재하면 False
형식 : 
a in b  <-- 반드시 b는 반복할 수 있는 iterable 이 와야 한다. (문자열,리스트,튜플,딕셔너리,셋)
a not in b

-- exMembership1.py --
"""
파일명: exMembership1.py 
프로그램 설명:  멤버쉽 연산자 예제 1
"""
# 리스트 변수 number에 1 ~ 5까지 저장한다.
number = [1,2,3,4,5]

# 반복이 가능한지 확인한다.
print(iter([]), iter(number))

# number 변수에 5가 존재합니까 ?
print(5 in number)  # True
# number 변수에 13이 존재합니까 ?
print(13 in number) # False

# number 변수에 7이 존재하지 않습니까 ?
print(7 not in number)  # True

# number 변수에 13이 존재하지 않습니까 ?
print(13 not in number)  # True

a = int(input('입력: '))

print(a == 1 or a == 2 or a == 3)
print(a in (1,2,3))   # 파이써닉한 코드 (좀 더 파이썬 다운 코드다.)
-- exMembership1.py --

7. 식별 연산자 (Identity Operators)
두 변수가 동일한 객체인지 확인하는 연산자
결과: True, False

종류 : is, not is
is : 두 객체가 같으면 True, 다르면 False  
is not : 두 객체가 같지 않으면 True, 같으면 False

형식 : 
a is b
a is not b


-- exIdentity1.py --
"""
파일명 : exIdentity1.py 
프로그램 설명 :  식별 연산자 예제 1
"""

# 파이썬에서는 모든 변수는 객체로 만든다.
# id() 함수: 변수의 메모리를 확인할 때 사용한다.
a1 = 7
a2 = 7
a3 = 8
print(a1, a2, a3)
print("a1:", id(a1)) # 140737117479912
print("a2:", id(a2)) # 140737117479912
print("a3:", id(a3)) # 140737117479944
print(a1 is a2)  # True  동일한 객체이므로
print(a1 is a3)  # False 동일한 객체가 아니므로

# is not
print(a1 is not a3)  # True  동일한 객체가 아니므로
-- exIdentity1.py --


#########
## 제어문 
#########

제어문이란 프로그램의 실행 흐름을 제어할 때 사용한다.
종류 : if, while, for, break, continue

조건문
조건문이란 실행문을 조건을 판단해서 실행하는 제어문으로 if문이 여기에 해당된다.

반복문
반복문이란 실행문을 반복해서 실행할 때 사용하는 제어문으로 while, for문이 여기에 해당된다.

if문
if문은 조건문으로 프로그램의 흐름을 제어할 때 사용하는 제어문이다.

예를 들어서 

우산을 챙긴다.
구두를 신는다.
외출한다.


if 밖에 비가오는가 ?:
    우산을 챙긴다.
    구두를 신는다.
else:
    운동화를 신는다.

외출한다.


if문은 4가지 종류가 있다.
단일 if문, if~else문, 다중if문, 중첩if문
단일 if문 형식 : 
if 조건식 : <-- 조건식은 참(True)과 거짓(False)을 판단할 수 있어야 한다.
    실행문  <-- 조건식이 참이면 실행문이 실행된다.
      :

if ~ else 문 :
if 조건식 :
    실행문1  <-- 조건식이 참이면 실행문1이 실행된다.
       :
else:
    실행문2  <-- 조건식이 거짓이면 실행문2가 실행된다.
       :

다중 if문 형식 :
if 조건식1 :
    실행문1   <-- 조건식1이 참이면 실행문1이 실행된다.
      :
elif 조건식2: <-- 조건식1이 거짓이면 조건식2를 실행한다. 
    실행문2   <-- 조건식2가 참이면 실행문2가 실행된다.
      :     
elif 조건식3: <-- 조건식2가 거짓이면 조건식3을 실행한다. 
    실행문3   <-- 조건식3이 참이면 실행문3이 실행된다.
      :
elif 조건식4: <-- 조건식3이 거짓이면 조건식4를 실행한다. 
    실행문4   <-- 조건식4가 참이면 실행문4가 실행된다.
      :
else:         <-- 조건식4가 거짓이면 이 부분이 실행한다.  (생략 가능)
    실행문5   <-- 조건식4가 기짓이면 실행문5가 실행된다.
      :

중첩 if문
if 조건식 :
    실행문  <-- 조건식이 참이면 실행문이 실행된다.
      :     
    if 조건식 :
        실행문
          :


자료형의 참과 거짓의 판단 기준
        True           False
숫자     1(0이 아닌 숫자)  0          
문자열   "test"           ""   <-- 값이 있으면 참, 없으면 거짓
리스트   [1,2,3]          []   <-- 값이 있으면 참, 없으면 거짓
튜플     (1,2,3)          ()   <-- 값이 있으면 참, 없으면 거짓
딕셔너리 {"a" : "b"}      {}   <-- 값이 있으면 참, 없으면 거짓
불리언   True            False

if dictData :
    :

if listData :
    :

관계 연산자(비교 연산자)의 판단 기준
x = 3
y = 2

x > y    x가 y보다 크다
x < y    x가 y보다 작다
x >= y   x가 y보다 크거나 같다
x <= y   x가 y보다 작거나 같다
x == y   x와 y가 같다
x != y   x와 y가 같지 않다


if x > y :
   :
if x == y :
   :

논리 연산자의 판단 기준
x = 3
y = 2

a : x == 3 
b : y != 2
a or b   a와 b 둘 중에 하나만 참이면 참
a and b  a와 b둘 다 참이어야 참
not a    a가 거짓이면 참

if x != y and x >= 3:
  :

if not x:
  :

멤버쉽 연산자
a = [1,2,3,4,5]
if 1 in a :
  :

식별연산자
if a is b :
  :

X
if a = 1:
   :

-- exIf1.py --
"""
파일명: exIf1.py
프로그램 설명: 단일 if문
"""
# 단일 if문
# 참일 때만 실행하는 구조이다.
# 거짓일 때는 실행하는 부분이 없다.
a = 2
b = 8

# 관계 연산자
# 형식:
# if a 관계 연산자 b:
#     실행문
#       :

if(a == 2):
    print('1. 이 부분이 실행됩니다.')

if not a > 10:
    print('a는 10보다 큽니다.')    

if a: 
    print('참이므로 실행됩니다.')   

-- exIf1.py --

#########
## 반복문
##########
반복문이란 실행문을 여러 번 반복해서 실행하는 제어문으로 while문과 for문이 여기에 해당된다.

while문은 실행문을 반복할 때 사용하는 제어문이다.

형식:
while 조건식:
    실행문  <-- 조건식이 참일 때 실행할 실행문
      :
else:       <-- else는 생략 가능
    실행문  <-- 조건식 거짓일 때 실행할 실행문
      :


-- exWhile1.py --
"""
파일명: exWhile1.py
프로그램 설명: while문
"""


-- exWhile1.py --