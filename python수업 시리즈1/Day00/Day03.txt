
-- exList2.py --
"""
파일명: exList2.py
프로그램 설명: 리스트 자료형에 데이터를 넣는 방법
"""

# 다양한 형태의 리스트 생성 방법
a = []  # 빈리스트
b = [1,2,3,4,5]  # 정수
c = [1.2, 2.5, 3.15]  # 실수
d = ['홍길동', "고길동", '김길동']  # 문자열
e = [1, 2.5, '홍길동']  # 정수, 실수, 문자열을 섞어서 넣을 수 있다.
f = [1, 2.5, ['홍길동', 2023]]  # 리스트
#  f[0] f[1]  f[2][0]   f[2][1]

print(a)
print(b)
print(c)
print(d)
print(e)
print(f)
print(f[2][0])
print('프로그램 종료')

# 리스트는 값을 변경할 수 있다.
l = [1,2,3,4,5]

# 리스트는 값을 변경할 수 있다.
l = [1,2,3,4,5] 
print(l[0])  # 1

l[0] = 10 # [10,2,3,4,5]
print(l[0])  # 10 

# 문자열은 값을 변경할 수 없다.
# 문자열은 값을 변경할 수 없는 불변형 자료형이다.
name = "James"
#       |||||   
#       ||||+-- [4]
#       |||+-- [3]
#       ||+-- [2]
#       |+-- [1]
#       +-- [0]
print(name[0])
# name[0] = 'A'
-- exList2.py --

-- exList3.py --
"""
파일명: exList3.py
프로그램 설명: 리스트 메소드를 사용하는 방법
"""

# 리스트 메소드 형식:
# 변수명.메소드()
listData = []
listData.append(1)
listData.append(2)
listData.append(3)
listData.append(4)
listData.append(5)
print(listData)  # [1, 2, 3, 4, 5]
listData.pop()
print(listData)  # [1, 2, 3, 4]
listData.remove(1)  # 인덱스 위치가 아니라 Data 1을 삭제한다.
print(listData)  # [2, 3, 4]
listData.clear()
print(listData)
-- exList3.py --


튜플은 리스트보다 속도면에서 빠르고 메모리를 적게 차지한다.

tuple : 순서가 있고 값을 변경할 수 없고 반복할 수 있고 중복된 데이터를 허용한다.
- Sequence(Ordered), IMMutable, Iterable, duplicate 

튜플은 리스트처럼 자료를 하나로 모아서 묶어 놓은 자료형이다.
튜플은 리스트처럼 추가,삽입,삭제,변경할 수 없는 불변형 자료형이다.
상수이므로 리스트하고 완전 반대라고 생각하면 된다.
형식 : 
변수명 = (항목, 항목 ...)
변수명 = 항목, 항목, ...
변수명 = tuple([항목, 항목 ...])

파이썬 인터렉티브 쉘에서 실습한다.
>>> t1 = (1,2,3,4,5)
>>> t2 = 1,2,3,4,5
>>> t3 = tuple([1,2,3,4,5])
>>> type(t1)
<class 'tuple'>
>>> type(t2)
<class 'tuple'>
>>> type(t3)
<class 'tuple'>

-- exTuple.py --
"""
파일명: exTuple.py
프로그램 설명: 튜플 자료형
"""

# 튜플은 리스트와 동일한 특징을 가지고 있다.
# 인덱스, 멤버쉽 연산, 크기 함수, 슬라이싱, 반복성, + 연산자, * 연산자
# 여기서는 아래에는 인덱싱, 반복성, + 연산자, * 연산자만 사용한다.


# 변수 t에 튜플 형식으로 정수 1 ~ 5까지 저장한다.
#    +-- t[-5]
#    |  +-- t [-4]
#    |  |  +-- t[-3]
#    |  |  |  +-- t[-2]
#    |  |  |  |  +-- t[-1]
#    |  |  |  |  |
t = (1, 2, 3, 4, 5)
#    |  |  |  |  |
#    |  |  |  |  +-- t[4]
#    |  |  |  +-- t[3]
#    |  |  +-- t[2]
#    |  +-- t[1]
#    +-- t[0]

print(t, type(t))  # (1, 2, 3, 4, 5) <class 'tuple'>

# 인덱싱
# 인덱스 번호로 항목을 출력하는 방법
# 형식: 변수명[인덱스번호]
# print(t[2], t[-3])  # 3  --> [2]  [-3] <--
# print(t[0], t[-5])  # 1  --> [0]  [-5] <--
# print(t[4], t[-1])  # 5  --> [4]  [-1] <--

# 멤버쉽 연산
# 종류: in, not in
# in : 값이 있으면 True, 없으면 False
# not in : 값이 없으면 True, 있으면 False
# 연산의 결과 : True, False
# 형식1 : 값 in 변수명
# 형식2 : 값 in 값
# 형식3 : 변수명 in 변수명
# 형식4 : 변수명 in 값

# t변수에 2가 존재합니까 ?
# print(2 in t)      # True
# t변수에 7이 존재하지 않습니까 ?
# print(7 not in t)  # True

# 크기 함수
# 크기 함수를 이용해서 자료의 길이(개수)를 확인할 수 있다.
# 리스트에서 크기 함수를 사용하면 항목의 개수를 구한다.
# 형식 : 함수명(인수),  len(변수명)
# 리턴값 : 변수의 개수
# 인수 : 입력값, 리턴값 : 출력값
print(len(t))  # 5

# 슬라이싱
# 슬라이싱 : 범위를 지정해서 데이터를 추출하는 기법이다.
# 형식 : 변수명[시작숫자:끝숫자]
# 여기서 시작숫자와 끝숫자는 index 번호를 의미한다.
# 범위 : 시작숫자 ~ 끝숫자 -1 까지
# 시작숫자 생략 : 처음부터
# 끝숫자 생략 : 시작숫자 ~ 끝까지

#  +-- [-5]
#  |  +-- [-4]
#  |  |  +-- [-3]
#  |  |  |  +-- [-2]
#  |  |  |  |  +--[-1]
#  |  |  |  |  |
# [1, 2, 3, 4, 5]
#  |  |  |  |  |
#  |  |  |  |  +--[4]
#  |  |  |  +-- [3]
#  |  |  +-- [2]
#  |  +-- [1]
#  +-- [0] 

#     ----->  <------
print(t[1:3], t[-4:-2])  # (2, 3)
print(t[2:],  t[-3:])    # (3, 4, 5)
print(t[:3]) # (1, 2, 3)

# 반복성 (Iterable)
# 반복할 때 사용하는 형식 : 제어문을 사용한다.
# 제어문은 프로그램의 흐름을 제어할 때 사용한다.
# for문
# 형식 : 
# for 변수 in 튜플:
#     실행문1
# else:
#     실행문2

# for문을 이용해서 t변수에 저장된 1 ~ 5까지 출력하기
for value in t:
    print(value)
else:
    print('for문 종료')

t = (1, 2, 3, 4, 5, 6, 7, 8, 9)
for value in t:
    print(f"2 x {value} = {2*value}")
else:
    print('for문 종료')

# + 연산자
# + 연산자를 이용해서 튜플끼로 더할 수 있다.
# 형식 : 
# 튜플1 + 튜플2
# (1,2,3,4,5) + (10,20,30,40,50)
# (1, 2, 3, 4, 5, 10, 20, 30, 40, 50)
# 임시적으로 + 한 것이고
# 영구적으로 + 하려면 변수에 저장해야 한다.
t = (1,2,3,4,5)
print(t + (10, 20, 30, 40, 50))  # 임시적으로 + 한 것
print(t)  # (1, 2, 3, 4, 5)
t += (10, 20, 30, 40, 50)  # 영구적으로 + 한 것, t = t + (10, 20, 30, 40, 50)
print(t)  # (1, 2, 3, 4, 5, 10, 20, 30, 40, 50)

# * 연산자
# * 연산자를 이용해서 튜플을 반복한다.
# 형식 : 튜플변수명 * 정수값
# (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
# 임시적으로 * 한 것이고
# 영구적으로 * 할려면 변수에 저장해야 한다.
t = (1,2,3,4,5)
print(t * 3)  # 임시적 (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
print(t)  # (1, 2, 3, 4, 5)
t *= 3    # 영구적 t = t * 3
print(t)  # (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)

# 튜퓰은 
# +, * 연산은 가능하지만
# -, / 연산은 불가능하다. 
# print(t - (1,2,3))
# print(t / (1,2,3))

# 인덱스 값 변경 X
# 단 편법으로 값을 새롭게 만들어서 t 변수에 저장할 수 있다.
t = (1,2,3,4,5)
# t[0] = 100  # 에러 (수정 X)

a = (100,)  # a = (100) 튜플이 아니고 int이다.
t = a + t[1:]
print(t)  # (100, 2, 3, 4, 5)
-- exTuple.py --

-- exTuple2.py --
"""
파일명: exTuple.py
프로그램 설명: 튜플 자료형에 데이터를 넣는 방법
"""

a = (1,2,3,4,5)   # 정수
b = (1.2, 2.1, 3.14)  # 실수
c = ('홍길동', '고길동', '김길동')  # 문자열
d = (1, 2.3, '홍길동')  # 다른 자료형을 같이 저장할 수 있다.
e = ((1,2,3), [4,5,6])
#   e[0][0]    e[1][1]
print(a); print(b); print(c); print(d); print(e)
print(e[0][0], e[1][1])  # 1 5

# a ~ e 까지 변수를 tupleData 변수에 저장한다.
tupleData = (a,b,c,d,e)

for value in tupleData:
    print(value)

print('프로그램 종료')    
-- exTuple2.py --


딕셔너리
순서가 없고 키의 이름은 변경할 수 없고 값은 변경할 수 있다.
키는 중복될 수 없지만 데이터는 중복을 허용한다.
- UnOrdered, Key(IMMutable), Value(Mutable), Iterable
- Key(No duplicate), Value(duplicate)

딕셔너리는 키와 값을 쌍으로 가지고 자료를 하나로 모아서 묶어 놓은 자료형이다.
형식 : 
변수명 = {'키':값, '키':값 ...}
변수명 = dict(키 = 값, 키 = 값 ...)

딕셔너리의 키는 문자열과 숫자로 구성할 수 있지만 주로 문자열로 key를 만든다.

-- exDict1.py --
"""
파일명 : exDict1.py
프로그램 설명: 딕셔너리 자료형
"""

# d 변수에 1 ~ 5까지 저장한다.
d = {'a':1, 'b':2, 'c':3, 'z':4, 'y':5 }
print(d, type(d)) # {'a': 1, 'b': 2, 'c': 3, 'z': 4, 'y': 5} <class 'dict'>

# 딕셔너리는 Sequence 타입의 객체가 아니므로 순서를 가지고 있지 않다.
# 그러므로 리스트나, 튜플처럼 index인 변수명[0] 처럼 값에 접근할 수 없다.
# 편법을 쓰면 가능하다. 키를 숫자로 지정하면 된다.
# print(d[0])  # KeyError: 0

# 편법으로 번호로 지정한 경우(index 번호의 효과)
dictData2 = {0:1, 1:2, 2:3, 3:4, 4:5}
print(dictData2, type(dictData2))  # {0: 1, 1: 2, 2: 3, 3: 4, 4: 5} <class 'dict'>
print(dictData2[0])  # key를 index 처럼 사용할 수 있다. (비추)


# 딕셔너리에 저장된 데이터에 접근하기 위해서는 키로 접근해야 한다.
# 형식 : 변수명['키'], 변수명[변수]
# 변수에 방을 번호(리스트, 튜플)로 표현하는 것이 아니라 이름(딕셔너리)으로 표현한다.
print(d['a'])  # 변수명['키'] 1
a = 'z'
print(d[a])  # 4


# 변수를 이용하는 방법
a = 'a'
b = 'b'
c = 'c'
d = 'd'
e = 'e'
dictData = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}
print(dictData[a])  # 1 변수 a에 저장된 값이 키가 된다.
print(dictData[b])  # 2 변수 b에 저장된 값이 키가 된다.
print(dictData[c])  # 3 변수 c에 저장된 값이 키가 된다.
print(dictData[d])  # 4 변수 d에 저장된 값이 키가 된다.
print(dictData[e])  # 5 변수 e에 저장된 값이 키가 된다.


# 변수를 이용하는 방법
dictData = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}

# 변수를 이용하는 방법
key = ['a', 'b', 'c', 'd', 'e']
print(dictData[key[0]])  # 1 변수 key[0]에 저장된 값이 키가 된다.
print(dictData[key[1]])  # 2 변수 key[1]에 저장된 값이 키가 된다.
print(dictData[key[2]])  # 3 변수 key[2]에 저장된 값이 키가 된다.
print(dictData[key[3]])  # 4 변수 key[3]에 저장된 값이 키가 된다.
print(dictData[key[4]])  # 5 변수 key[4]에 저장된 값이 키가 된다.


# 반복성
# 딕셔너리 자료형은 반복성을 가지고 있으므로 for문으로 돌릴 수 있다.
dictData = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5}

# 딕셔너리는 for문에서 키를 던진다.
for value in dictData:
    print(value)  # a b c d e 

# key 변수에 저장된 키의 값을 이용해서 값을 출력한다.
for value in dictData:
    print(dictData[value])  # 1 2 3 4 5 

# 딕셔너리에서 메소드(메서드)를 이용해서 key를 추출한다.
for key in dictData.keys():
    print(key)  # a b c d e

# 딕셔너리에서 메소드(메서드)를 이용해서 값을 추출한다.
for value in dictData.values():
    print(value) # 1 2 3 4 5

# 학생의 정보를 저장하는 변수를 사전 자료형으로 생성한다.
# 저장되는 값: 이름(name), 핸드폰(phone), 생일(birth)
student = {'name':'홍길동', 'phone':'010-1111-2222', 'birth':'12월25일'}

print(student['name'])   # 홍길동
print(student['phone'])  # 010-1111-2222
print(student['birth'])  # 12월25일
print()  # 엔터

for value in student.values():
    print(value)
-- exDict1.py --


순서가 없고 키의 이름은 변경할 수 없고 값은 변경할 수 있다.
키는 중복될 수 없지만 데이터는 중복을 허용한다.
- UnOrdered, Key(IMMutable), Value(Mutable), Iterable
- Key(No duplicate), Value(duplicate)

-- exDict2.py --
"""
파일명 : exDict2.py
프로그램 설명: 딕셔너리 자료형
"""

# 키가 중복된 경우
# 처음에 만들어진 키는 인식하지 않고 나중에 만들어진 키만 인식된다.
dictData = {'a':1, 'a':2, 'b':3, 'b':4, 'e':5}
print(dictData)  # {'a': 2, 'b': 4, 'e': 5}
for key in dictData:
    print(key)  # a b e
for value in dictData.values():
    print(value)  # 2 4 5 (키 중복에 의해서 1, 3은 출력되지 않는다.)


dictData = {'a':1, 'b':1, 'c':1, 'd':2, 'e':2}

for value in dictData.values():
    print(value)  # 1 1 1 2 2 

# kor: 국어점수, eng: 영어점수, math: 수학점수
dictData = { 'kor':100, 'eng':100, 'math':100 }

for value in dictData.values():
    print(value)  # 100 100 100

# 딕셔너리에 키와값을 추가하는 형식:
# 변수명['키'] = 값 or # 변수명[키변수명] = 값
dictData = {}  # 빈 딕셔너리
dictData['kor'] = 1
dictData['eng'] = 2
dictData['math'] = 3

print(dictData)

# 딕셔너리에 키와값을 추가하는 형식:
# 변수명['키'] = 값 or # 변수명[키변수명] = 값
dictData = {}  # 빈 딕셔너리
dictData['kor'] = 1
dictData['eng'] = 2
dictData['math'] = 3

# 딕셔너리에 키를 삭제하는 형식:
# 변수명.pop('키') or 변수명.pop(키변수명) 
# del(변수명['키']) or del(변수명[키변수명])
dictData.pop('math')
print(dictData)
del(dictData['kor'])
print(dictData)
-- exDict2.py --

>>> input('이름: ')
이름: 홍길동
'홍길동'
>>> input('국어점수: ')
국어점수: 90
'90'
>>> type('90')
<class 'str'>
>>> type(90)
<class 'int'>
>>> int('90')
90
>>> int(input('국어점수: '))
국어점수: 90
90

-- 성적처리프로그램.py --
"""
파일명: 성적처리프로그램.py
프로그램 설명: 이름,국어,영어,수학 점수를 입력을 받아서 처리하는 프로그램
"""

# 1. 입력 부분
name = input('이름: ')
kor  = int(input('국어점수: '))
eng  = int(input('영어점수: '))
math = int(input('수학점수: '))
# print(name, kor, eng, math)

# 2. 처리 부분
total = kor + eng + math
average = total / 3

# 3. 출력 부분
print(f'이름: {name}')
print(f'국어점수: {kor}')
print(f'영어점수: {eng}')
print(f'수학점수: {math}')
print(f'총점: {total}')
print(f'평균: {average:.2f}')
-- 성적처리프로그램.py --

과제> 성적처리프로그램.py 의 변수를 딕셔너리로 수정하기

파일명: 성적처리프로그램Dict.py

-- 성적처리프로그램Dict.py --
"""
파일명: 성적처리프로그램Dict.py
프로그램 설명: 이름,국어,영어,수학 점수를 입력을 받아서 처리하는 프로그램
"""

# student = { 'name':??, 'kor':??, 'eng':??, 'math':???, 'total':???, 'average': ?? }
student = {}  

# 1. 입력 부분
student['name'] = input('이름: ')
student['kor']  = int(input('국어점수: '))
student['eng']  = int(input('영어점수: '))
student['math'] = int(input('수학점수: '))
# print(student)

# 2. 처리 부분
student['total'] = student['kor'] + student['eng'] + student['math']
student['average'] = student['total'] / 3

# 3. 출력 부분
print(f'이름: {student["name"]}')
print(f'국어점수: {student["kor"]}')
print('영어점수: %d' %student['eng'])
print(f'수학점수: {student["math"]}')
print(f'총점: {student["total"]}')
print(f'평균: {student["average":.2f]}')
-- 성적처리프로그램Dict.py --
