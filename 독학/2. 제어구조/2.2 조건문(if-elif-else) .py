# 오늘은 새로운것을 배워 볼것입니다
""" if문 """
# if는 '만약 ...이면' 이라는 뜻이지요? 파이썬도 같은 의미로 사용됩니다.
# "달면 삼키고 쓰면 뱉는다."는 속담이 있지요. 그것을 파이썬에서는 쓰는 것과 비슷하게 써보겠습니다.

# 만약 달다면:
#    삼킨다
# 그렇지 않으면:
#    뱉는다

# 이렇게 쓰는데 영어를 조금 섞어서 써볼까요?

# if 달다면:
#   삼킨다
# else:
#   뱉는다

# 위에 든 예들은 설명을 위해서 써 본것인데, 그대로 작성하면 파이썬이 이해를 못합니다.

""" 파이썬의 if 와 else """
# 그럼 이번엔 실습을 해보겠습니다. 아래의 두 수 a와 b 주에 어느 쪽이 더 클까요?

a = 1234 * 4
b = 13456 / 2

# if 문을 사용해서 a가 크면 'a'를 출력하고 b가 크면 'b'를 출력하도록 프록램을 작성해 볼까요?

if a > b:                  # 만약 a 가 b보다 크면
    print('a')             # 'a'를 출력한다.
else:                  # 그렇지 않으면
        print('b')         # 'b'를 출력한다.

# 이후에 있는 것들은 주석(설명)이므로 입력하지 않아도 됩니다.
# 'a > b' 라고 쓴것은 'a가 b보다 큰가?' 를 나타냅니다. 어렵지 않죠?

""" elif """
# 조건을 여러 개 주는 거도 가능합니다. 이번엔 c와 d를 비교해 보겠습니다.

c = 15 * 5
d = 15 + 15 + 15 + 15 +15
if c > d:
    print('c is greater than d')
elif c == d:
    print('c is equal to d')
elif c < d:
    print('c is less than d')
else:
    print('I don' 't know')

# 이렇게 'elif' 라는 것을 사용하면 여러 개의 조건을 검사해서 그중에서 맘에 드는 것을 고를 수 있답니다.

""" == 연산자 """
# 여기서 새로운 것이 또 있는데, 바로 '=='(등호 두 개)입니다.
# '=='는 지금까지 알고 있던 '='(등호 한 개)와는 쓰임새가 다르니 혼동하지 않도록 주의 하세요
# 'c == d'라고 쓰면 'c 와 d아ㅢ 값이 같은가?'를 나타냅니다. 지금처럼 두값을 비교할때 사용하지요.
# 지금까지 등호하나를 써서 ' c = d'라고 쓴것은 'd'의 값을 'c'에 넣으라 는 뜻이었고요
# watch = 1000000
# 위에 변수가 기억나시죠? 이제 그 둘을 구별하실 수 있겠죠?

""" 나머지 계산을 이용하는 if문 """
# 어떤 수를 다른 수로 나눈 나머지가 0이면 '나누어 떨어진다'라고 합니다. 예를 들어, 48을 4로 나눈 나머지는 0이므로, 48은 4로 나누어 떨어집니다.

# 48 % 4 # 0

# 어떤 수 'a'가 다른 수 'b'로 나누어 떨어지는지를 파이썬의 if 문으로 다음과 같이 평가할 수 있습니다.

a = 48
b = 4
if a % b == 0:
    print(f'{a}는 {b}로 나누어 떨어집니다.')
elif a % b != 0:
    print(f'{a}는 {b}로 나누어 떨어지지 않습니다.')

# 위의 예에서 'elif a % b != 0:' 대신 'else:' 라고 해도 결과는 같겠죠?
# 정답은 아닙니다

""" 조건에 따라 반복문 중단하기 """
# 어릴 떄는 큰 수를 잘 이해하지 못하죠?

# 하나부터 열까지밖에 모르는 아이퍼럼, 10보다 큰 숫자가 들어오면 멈추는 반복문을 작성해볼까요?

max = 10

while True:
    num = int(input())
    if num > max:
        print(num, 'is too big')
        break

# 이와 같이 반복문에서 'break'를 사용하면 빠져나올 수 있답니다.

# 입력:
# 3
# 6
# 9
# 12

# 출력:
# 12 is too big!

# 오늘 주제는 여기까지입니다.
# 강의는 이해가 된다고 해서 그냥 훑어보지 마시고 꼭 예제를 따라서 쳐보시기 바랍니다.
# 그리고 그것과 비슷한 프로그램을 스스로 만들어 보세요.
# '백타가 불여일작'이라는 말도 있거든요 (백 번 따라해보는 것보다 한 반 직접 만들어 보는 것이 낫다)

# 오늘은 여기까지 ~