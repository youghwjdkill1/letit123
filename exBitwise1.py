"""
파일명 : exBitwise1.py 
프로그램 설명 :  비트 연산자 예제 1
"""

# 128 64 32 16 8 4 2 1 
# a = 00000111    
# b = 00000011

a = 7
b = 3
print(bin(a))  # 0b111
print(bin(b))  # 0b11

# 8bit로 표현
# 00000111
# 00000011
print("{0:b}".format(a).zfill(8))  # 00000111
print("{0:b}".format(b).zfill(8))  # 00000011

# 32bit로 표현
# 00000000000000000000000000000111
# 00000000000000000000000000000011
print("{0:b}".format(a).zfill(32))  # 00000111
print("{0:b}".format(b).zfill(32))  # 00000011

# 64bit로 표현
# 0000000000000000000000000000000000000000000000000000000000000111
# 0000000000000000000000000000000000000000000000000000000000000011
print("{0:b}".format(a).zfill(64))  # 00000111
print("{0:b}".format(b).zfill(64))  # 00000011



# 5. 비트 연산자 (Bitwise operators)
# 컴퓨터의 최소 단위인 비트를 다루는 연산자
# 결과: 연산된 결괏값

# 참고 : https://www.binaryconvert.com/
# 계산기 -> 프로그래머로 확인이 가능하다.

# 128 64 32 16 8 4 2 1

# 00000000
# ||||||||
# |||||||+-- 2^0
# ||||||+-- 2^1
# |||||+-- 2^2
# ||||+-- 2^3
# |||+-- 2^4
# ||+-- 2^5
# |+-- 2^6
# +-- 2^7

# a = 7, b = 3 일 경우 2진수 표현하면
# a = 00000111
# b = 00000011

# 연산자 사용 예       의미       
# &      a & b      비트 AND 연산. 둘다 참일때만 만족	
# |      a | b      비트 OR 연산. 둘 중 하나만 참이여도 만족
# ^      a ^ b      비트 XOR 연산. 둘 중 하나만 참일 때 만족	
# ~      a ~ b      비트 NOT 연산, 보수 연산.	
# <<     a << b     왼쪽 시프트 연산자. 변수의 값을 왼쪽으로 지정된 비트 수 만큼 이동	
# >>     a >> b     오른쪽 시프트 연산자. 변수의 값을 오른쪽으로 지정된 비트 수 만큼 이동	

# a & b : 3
# a =    00000111
# b =  & 00000011
#      ----------
#        00000011
       
# a | b : 7
# a =    00000111
# b =  | 00000011
#      ----------
#        00000111

# a ^ b : 4
# a =    00000111
# b =  ^ 00000011
#      ----------
#        00000100


# ~a : -8
# a = 00000111
# ~a :11111000

# 1  : 00000001   
# ~1 : 11111110   10000001(x)

# 1 : 00000001


# -1 : 11111111
# -2 : 11111110
# -3 : 11111101
# -4 : 11111100

# 1일 경우 왼쪽 쉬프트 연산을 한 경우
# 128 64 32 16 8 4 2 1 
# 1 << 1
# 00000001  << 1  => 00000010
# 00000001  << 2  => 00000100
# 00000001  << 3  => 00001000

# 128 64 32 16 8 4 2 1 
# 64일 경우 오른쪽 쉬프트 연산을 한 경우
# 64 : 01000000 >> 1 => 00100000
# 64 : 01000000 >> 2 => 00010000