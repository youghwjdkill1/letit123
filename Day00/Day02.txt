
실습> 화면에 아래와 같은 문자열을 출력하시오.

변수를 활용해서 출력하기

1. 파일명 : ex04.py
2. 출력내용 :
날짜: 2023년 5월 17일
날씨: 맑음
오후: 더 맑음
파이썬 화이팅!

-- ex04.py --
"""
파일명: ex04.py
프로그램 설명: 문자열 출력하기
"""

today = "날짜: 2023년 5월 17일"
weather = "날씨: 맑음"
message = "파이썬 화이팅!"
print(today)
print(weather)
print("오후: 더 맑음")
print(message)
-- ex04.py --

변수: 데이터(값)를 저장하는 메모리 공간이다.
이 메모리 공간은 RAM에 저장된다.
변수는 메모리 주소로 할당이 된다.
변수에 저장된 데이터는 얼마든지 변경할 수 있다.
eg.)
count = 1
print(count)  # 1
count = 2
print(count)  # 2


o 변수명을 만드는 규칙
변수명은 사용자가 마음대로 생성할 수 있지만 여기에는 아래와 같은 약간의 제약이 따른다.
변수명을 만들때는 의미있는 이름을 부여해야 한다.
변수명을 만들때는 파이썬에서 제공되는 예약어(if, while ...)는 사용할 수 없다.
변수명은 특수문자는 사용할 수 없습니다.
변수명은 대소문자, 숫자, _를 이용해서 만들 수 있다.
변수명은 _를 사용할 수 있고 _로 시작할 수 있다.
변수명은 숫자로 시작할 수 없다.
변수명은 대소문자를 사용할 수 있다.
변수명은 대소문자를 구분한다. (name, Name, nAme 은 모두 다른 변수)


변수명을 의미있는 이름으로 작성하면 프로그램의 흐름을 이해할 수 있다.

이미 만들어진 함수, 클래스로 변수를 생성하면 안된다.
- 키워드처럼 에러가 발생하지 않는다.


변수명의 사용 예
test$@ = 1 : X  <-- 특수문자 $와 @는 변수명으로 사용할 수 없다.
123abc =  10 : X  <-- 변수명은 숫자로 시작할 수 없다.
abc123 = 10 : O <-- 사용 가능
name = "홍길동" : O  <-- 사용 가능하지만 아래의 Name 변수와 다르다
Name = "홍길순" : O  <-- 사용 가능하지만 위의 name 변수와 다르다
message_string = "Hello"  : O  <-- _ 는 사용할 수 있다.
message-string = "Hello"  : X 
_name = "홍길동" : O  <-- _는 변수명으로 사용할 수 있고 _로 시작할 수 있다.
if = 10 : X  <-- 예약어는 변수명으로 사용할 수 없다.
while = 20 : X  <-- 예약어는 변수명으로 사용할 수 없다.
if1 = 10 : O  <-- 예약어가 아니므로 변수명으로 사용할 수 있다.
while1 = 20 : O  <-- 예약어가 아니므로 변수명으로 사용할 수 있다.

# 파이썬에서 키워드를 확인하는 방법
>>> import keyword
>>> print(keyword.kwlist)
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

-- 변수명표기법.py --
"""
파일명: 변수명표기법.py
프로그램 설명: 변수명 표기법
"""
# 변수 표기법
# 1. 카멜(Camel) 표기법
# 낙타의 등을 본따서 만든 표기법
# eg. studentName = "홍길동"
#
# 2. 스네이크(Snake) 표기법
# 바닥을 기어가는 뱀의 모습으로 만든 표기법
# eg. student_name = "홍길동"
studentName1  = '홍길동'
student_name2 = '김길동'
print(studentName1, student_name2)
-- 변수명표기법.py --


-- errorTest.py --
"""
파일명 : errorTest.py
프로그램 설명 : print() 함수와 에러 구분하기
"""

# print() : 문자열이나 값을 출력할 때 사용하는 함수다.
# 함수 : 명령어
# 문자열 : 문자들이 여러개 모여있는 것을 말한다.
# 문자열을 사용할 때는 따옴표(작은,큰)로 묶어서 사용한다.
# 형식 : print(변수), print(문자열)
# print('오늘은 파이썬을 배웁니다.')
# print("오늘은 파이썬을 배웁니다.")

# 파이썬에 자주 접하는 에러 확인
# 1. 문법이 틀린 경우
# SyntaxError: 에러의 원인이 출력된다.
# print(Hello world!)
# print("Hello world!")
#
# 2. 들여쓰기가 잘못된 경우
# IndentationError: 에러의 원인이 출력된다.
#  print("Hello world!")
#
# 3. 이름이 잘못된 경우
# NameError: 에러의 원인이 출력된다.
# prin("Hello world!")

print("프로그램 종료")
-- errorTest.py --

%용법
>>> print(1,2,3)
1 2 3
>>> print('%d %d %d')
%d %d %d
>>> print('%d %d %d' %(1,2,3))
1 2 3

format() 메소드(메서드)용법
>>> print('{} {} {}')
{} {} {}
>>> print('{} {} {}'.format(1,2,3))
1 2 3

f-string 용법
>>> print('{1} {2} {3}')
{1} {2} {3}
>>> print(f'{1} {2} {3}')
1 2 3

%s: 문자열
%d: 정수
%f: 실수

>>> msg = '안녕하세요'
>>> msg
'안녕하세요'
>>> print(msg)
안녕하세요
>>> print('%s' %msg)
안녕하세요
>>> print('{}'.format(msg))
안녕하세요
>>> print(f'{msg}')
안녕하세요

-- ex05.py --
"""
파일명: ex05.py
프로그램 설명: 변수의 값 출력하기
"""

# 값을 입력하는 부분
# 형식: 변수명 = 값
name = '홍길동'
kor  = 100
eng  = 90
math = 80

# 값을 출력하는 부분
# 변수 출력 용법으로 출력한다.
# 형식 : print(문자열,변수)
print('이름:', name)     # 이름: 홍길동
print('국어점수:', kor)   # 국어점수: 100
print('영어점수:', eng)   # 영어점수: 90
print('수학점수:', math)  # 수학점수: 80
print(name, kor, eng, math) # 홍길동 100 90 80
print() # 엔터

# %용법 으로 출력한다.
# 형식 : print('서식 문자열' %(변수))
# %s: 문자열
# %d: 정수
print('이름: %s' %name)
print('국어점수: %d' %kor)
print('영어점수: %d' %eng)
print('수학점수: %d' %math)
print('%s %d %d %d' %(name, kor, eng, math)) # 홍길동 100 90 80
print()

# format() 메소드(함수) 용법으로 출력한다.
# 형식 : print('{}'.format(변수))
print('이름: {}'.format(name))
print('국어점수: {}'.format(kor))
print('영어점수: {}'.format(eng))
print('수학점수: {}'.format(math))
print('{} {} {} {}'.format(name, kor, eng, math)) # 홍길동 100 90 80
print()

# f-string 용법으로 출력한다.
# 형식 : print(f'{변수명}')
print(f'이름: {name}')
print(f'국어점수: {kor}')
print(f'영어점수: {eng}')
print(f'수학점수: {math}')
print(f'{name} {kor} {eng} {math}') # 홍길동 100 90 80
print()
-- ex05.py --

-- ex06.py --
"""
파일명: ex06.py
프로그램 설명: print()함수의 다양한 사용법
"""

# print() 함수는 변수나 문자열을 화면에 출력하는 함수이다.
# 형식: print(value, ...)
# 형식: print(value, sep=' ')
# 형식: print(value, end='\n')
# print() 함수의 기본값 
# sep 변수 : ' '  <-- 공백
# end 변수 : '\n' <-- 엔터

i1 = 1
i2 = 2
i3 = 3

print(i1, i2, i3)  # 1 2 3
print(i1, i2, i3, sep='--',end='<-->')  # 1--2--3<-->1 2 3 
print(i1, i2, i3) 
-- ex06.py --


###########
## 자료형 
###########

파이썬에서 사용되는 자료형
- 정수, 실수, 문자열, 리스트, 튜플, 딕셔너리, 셋, 불리언

파이썬에서는 컬렉션 데이터 유형이 4가지가 존재한다.
컬렉션이란 여러 개의 값을 하나로 묶어서 저장할 수 있는 데이터 구조를 의미한다.

1. list  : 순서가 있고 값을 변경 가능하고 반복할 수 있고 중복된 데이터를 허용한다.
- Sequence(Ordered), Mutable, Iterable, duplicate 
2. tuple : 순서가 있고 값을 변경할 수 없고 반복할 수 있고 중복된 데이터를 허용한다.
- Sequence(Ordered), IMMutable, Iterable, duplicate 
3. dictionary : 순서가 없고 키의 이름은 변경할 수 없지만 값을 변경할 수 있고 반복할 수 있고 
키는 중복될 수 없지만 데이터는 중복을 허용한다.
- UnOrdered, Key(IMMutable), Value(Mutable), Iterable
- Key(No duplicate), Value(duplicate)
4. set : 순서가 없고 값을 변경할 수 없고 반복할 수 있고 중복된 데이터를 허용하지 않는다.
- UnOrdered, IMMutable, Iterable, No duplicate 

16진수
0 ~ 9
a: 10
b: 11
c: 12
d: 13
e: 14
f: 15

list 자료형 (가변형)
순서가 있고 값을 변경 가능하고 반복할 수 있고 중복된 데이터를 허용한다.
- Sequence(Ordered), Mutable, Iterable, duplicate 

리스트는 자료를 하나로 모아서 묶어 놓은 자료형이다.
항목은 값이나 변수가 올 수 있다.
형식 : 
변수명 = [항목, 항목 ...]
변수명 = list([항목, 항목 ...])
변수명 = list((항목, 항목 ...))

리스트는 Mutable 타입의 객체이므로 데이터를 추가/수정/삭제할 수 있다.
Mutable : 변할 수 있는

-- exList.py --
"""
파일명: exList.py
프로그램 설명: 리스트 자료형
"""

# 변수 l에 리스트 형식으로 정수 1 ~ 5까지 저장한다.
l = [1, 2, 3, 4, 5]
print(l, type(l))  # [1, 2, 3, 4, 5] <class 'list'>

# 인덱싱
# 인덱스 번호로 항목을 출력하는 방법
# 형식: 변수명[인덱스번호]
# print(l[2], l[-3])  # 3  --> [2]  [-3] <--
# print(l[0], l[-5])  # 1  --> [0]  [-5] <--
# print(l[4], l[-1])  # 5  --> [4]  [-1] <--

# 멤버쉽 연산
# 종류: in, not in
# in : 값이 있으면 True, 없으면 False
# not in : 값이 없으면 True, 있으면 False
# 연산의 결과 : True, False
# 형식1 : 값 in 변수명
# 형식2 : 값 in 값
# 형식3 : 변수명 in 변수명
# 형식4 : 변수명 in 값

# l변수에 2가 존재합니까 ?
# print(2 in l)      # True
# l변수에 7이 존재하지 않습니까 ?
# print(7 not in l)  # True


# 크기 함수
# 크기 함수를 이용해서 자료의 길이(개수)를 확인할 수 있다.
# 리스트에서 크기 함수를 사용하면 항목의 개수를 구한다.
# 형식 : 함수명(인수),  len(변수명)
# 리턴값 : 변수의 개수
# 인수 : 입력값, 리턴값 : 출력값
print(len(l))  # 5

# 슬라이싱
# 슬라이싱 : 범위를 지정해서 데이터를 추출하는 기법이다.
# 형식 : 변수명[시작숫자:끝숫자]
# 여기서 시작숫자와 끝숫자는 index 번호를 의미한다.
# 범위 : 시작숫자 ~ 끝숫자 -1 까지
# 시작숫자 생략 : 처음부터
# 끝숫자 생략 : 시작숫자 ~ 끝까지

#  +-- [-5]
#  |  +-- [-4]
#  |  |  +-- [-3]
#  |  |  |  +-- [-2]
#  |  |  |  |  +--[-1]
#  |  |  |  |  |
# [1, 2, 3, 4, 5]
#  |  |  |  |  |
#  |  |  |  |  +--[4]
#  |  |  |  +-- [3]
#  |  |  +-- [2]
#  |  +-- [1]
#  +-- [0] 

#     ----->  <------
print(l[1:3], l[-4:-2])  # 2 3
print(l[2:],  l[-3:])    # [3, 4, 5]


# 반복성 (Iterable)
# 반복할 때 사용하는 형식 : 제어문을 사용한다.
# 제어문은 프로그램의 흐름을 제어할 때 사용한다.
# for문
# 형식 : 
# for 변수 in 리스트:
#     실행문1
# else:
#     실행문2

# for문을 이용해서 l변수에 저장된 1 ~ 5까지 출력하기
for value in l:
    print(value)
else:
    print('for문 종료')


l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for value in l:
    print(f"2 x {value} = {2*value}")
else:
    print('for문 종료')

# + 연산자
# + 연산자를 이용해서 리스트끼로 더할 수 있다.
# 형식 : 
# 리스트1 + 리스트2
# [1,2,3,4,5] + [10,20,30,40,50]
# [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]
# 임시적으로 + 한 것이고
# 영구적으로 + 하려면 변수에 저장해야 한다.
l = [1,2,3,4,5]
print(l + [10, 20, 30, 40, 50])  # 임시적으로 + 한 것
print(l)  # [1, 2, 3, 4, 5]
l += [10, 20, 30, 40, 50]  # 영구적으로 + 한 것, l = l + [10, 20, 30, 40, 50]
print(l)  # [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]

# * 연산자
# * 연산자를 이용해서 리스트를 반복한다.
# 형식 : 리스트변수명 * 정수값
# [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
# 임시적으로 * 한 것이고
# 영구적으로 * 할려면 변수에 저장해야 한다.
l = [1,2,3,4,5]
print(l * 3)  # 임시적 [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
print(l)  # [1, 2, 3, 4, 5]
l *= 3    # 영구적 l = l * 3
print(l)  # [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]

# 리스트는 
# +, * 연산은 가능하지만
# -, / 연산은 불가능하다. 
# print(l - [1,2,3])
# print(l / [1,2,3])

# 인덱스 값 변경
# 형식1: 변수명[인덱스번호] = 값
# 형식2: 변수명[인덱스번호] = 변수
# 형식3: 변수명[인덱스번호] = 함수
# 형식4: 변수명[인덱스번호] = 수식
l = [1,2,3,4,5]
print(l)  # [1, 2, 3, 4, 5]
l[0] = 10
l[4] = 50
print(l)  # [10, 2, 3, 4, 50]
l[1] = 10
print(l)  # [10, 10, 3, 4, 50]

-- exList.py --
